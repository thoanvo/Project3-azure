name: Azure Pipelines
variables:
  python.version: '3.7.6'
  applicationname: 'App-project3'
stages:
  - stage: ProvisionIaC
    displayName: Azure Resources Provisioning
    jobs:
    - job: Provision_Azure_IaC
      displayName: Provision Azure IaC
      pool:
        vmImage: 'ubuntu-18.04'
      steps:
      - task: DownloadSecureFile@1
        name: terraform
        displayName: Download terraform.tfvars
        inputs:
          secureFile: 'terraform.tfvars'

      - task: TerraformInstaller@0
        displayName: Install Terraform
        inputs:
          terraformVersion: '1.1.9'

      - task: Bash@3
        displayName: Copy terraform.tfvars
        inputs:
          targetType: 'inline'
          script: cp $(Agent.TempDirectory)/terraform.tfvars $(System.DefaultWorkingDirectory)/terraform

      # Needed for Terraform VM deployment
      - task: InstallSSHKey@0
        displayName: Key for SSH to VM
        inputs:
          knownHostsEntry: '$(knownHostsEntry)'
          sshPublicKey: '$(sshPublicKey)'
          sshKeySecureFile: 'id_rsa'

      - task: TerraformTaskV1@0
        displayName: Terraform Init
        inputs:
          provider: 'azurerm'
          command: 'init'
          backendServiceArm: 'AZServiceConnection'
          backendAzureRmResourceGroupName: 'project3'
          backendAzureRmStorageAccountName: 'project38286'
          backendAzureRmContainerName: 'project3'
          backendAzureRmKey: 'terraform.tfstate'
          workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'

      - task: TerraformTaskV1@0
        displayName: Terraform Validate
        inputs:
          provider: 'azurerm'
          command: 'validate'
          workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
          #environmentServiceNameAzureRM: 'AZServiceConnection'

      - task: TerraformTaskV1@0
        displayName: Terraform Plan
        inputs:
          provider: 'azurerm'
          command: 'plan'
          workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
          #environmentServiceNameAzureRM: 'AZServiceConnection'

      - task: TerraformTaskV1@0
        displayName: Terraform Apply
        inputs:
          provider: 'azurerm'
          command: 'apply'
          commandOptions: |
            -auto-approve
          workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
          #environmentServiceNameAzureRM: 'AZServiceConnection'


  # - stage: Build
  #   jobs:
  #   - job: Build
  #     pool:
  #       name: Hosted Ubuntu 1604
  #     steps:
  #     - task: ArchiveFiles@2
  #       displayName: 'Archive FakeRestAPI'
  #       inputs:
  #         rootFolderOrFile: 'path/to/fakerestapi'
  #         includeRootFolder: false
  #         archiveType: 'zip'
  #         archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
  #     - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
  #       displayName: 'Upload Package'
  #       artifact: drop-fakerestapi
  # - stage:
  #   jobs:
  #   - deployment: FakeRestAPI
  #     pool:
  #       vmImage: 'Ubuntu-16.04'
  #     environment: 'TEST'
  #     strategy:
  #       runOnce:
  #         deploy:
  #           steps:
  #           - task: AzureWebApp@1
  #             displayName: 'Deploy Azure Web App'
  #             inputs:
  #               azureSubscription: ''
  #               appName: ''
  #               appType: webApp
  #               package: $(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip
    # - deployment: VMDeploy
    #   displayName: NAME
    #   environment:
    #     name:  ENVIRONMENT NAME
    #     resourceType: VirtualMachine
    #     tags: TAG NAME
    #   strategy:
    #     runOnce:
    #       deploy:
    #         steps:
    #         - task: Bash@3
    #           inputs:
    #             targetType: 'inline'
    #             script: |
    #               #! /bin/bash
                  
    #               sudo apt-get upgrade -y
    #               sudo apt-get install python3-pip -y
    #               sudo apt-get install unzip -y
    #               sudo apt-get install -y chromium-browser
    #               pip3 install selenium
    #               export PATH=$PATH:some/path


